name: Release
on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - beta
  #     - main
env:
  FLUTTER_VERSION: "3.19.4"

jobs:
  build_apk:
    name: Build and Upload Artifact APK
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
      - name: Setup node environment
        uses: actions/setup-node@v3
        with:
          node-version: "21"
      - name: Install flutter dependencies
        run: flutter pub get
      - name: Install semantic-release modules
        run: |
          npm i @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/changelog @semantic-release/github @semantic-release/exec @semantic-release/git
      - name: Semantic Release
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          npx semantic-release@23 -d # dry run for updating pubspec.yml version property
      - name: Build APK for Android
        run: |
          flutter build apk
          ls -R build/app/outputs/flutter-apk
      - name: Upload APK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk

  build_windows_zip:
    name: Build and Upload Artifact for Windows Zip
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
      - name: Install flutter dependencies
        run: flutter pub get
      - name: Build for Windows
        run: |
          flutter build windows
          ls -R build/windows/x64/runner/Release
      - name: Zip compiled files
        run: Compress-Archive -Path build/windows/x64/runner/Release* -DestinationPath Quran.zip
      - name: Upload APK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-windows
          path: Quran.zip

  build_deb_x86_64:
    name: Build and Upload Artifact for Linux Deb x86_64
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake libgtk-3-dev ninja-build libayatana-appindicator3-dev
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
      - name: Install flutter dependencies
        run: flutter pub get
      - name: Enable dart_distributor
        run: dart pub global activate flutter_distributor
      - name: Update PATH
        run: echo 'export PATH="$PATH:$HOME/.pub-cache/bin"' >> ~/.bashrc
      - name: Build deb package
        run: |
          flutter_distributor package --platform linux --targets deb
          mv dist/**/*.deb dist/release-linux-x86.deb
      - name: Upload APK Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-linux-x86
          path: dist/release-linux-x86.deb

  # # Manage the Flutter version on the self-hosted runner manually!
  # # Flutter currently doesn't provide Linux ARM64 binaries.
  # build_deb_arm_64:
  #   name: Build and Upload Artifact for Linux Deb ARM 64
  #   runs-on: [self-hosted, linux, arm64]
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
  #     - name: Install dependencies
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y clang cmake libgtk-3-dev ninja-build libayatana-appindicator3-dev
  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: ${{ env.FLUTTER_VERSION }}
  #         channel: "stable"
  #     - name: Install flutter dependencies
  #       run: flutter pub get
  #     - name: Enable dart_distributor
  #       run: dart pub global activate flutter_distributor
  #     - name: Update PATH
  #       run: echo 'export PATH="$PATH:$HOME/.pub-cache/bin"' >> ~/.bashrc
  #     - name: Build deb package
  #       run: |
  #         flutter_distributor package --platform linux --targets deb
  #         mv dist/**/*.deb dist/release-linux-arm-64.deb
  #     - name: Upload APK Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: release-linux-arm-64
  #         path: dist/release-linux-arm-64.deb

  release:
    name: Semantic Release
    needs: [build_apk, build_windows_zip, build_deb_x86_64] # build_deb_arm_64
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: "stable"
      - run: flutter pub get
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets
          pattern: release-*
          merge-multiple: true
      - run: ls -R release-assets
      - name: Setup node environment
        uses: actions/setup-node@v3
        with:
          node-version: "21"
      - name: Install semantic-release modules
        run: |
          npm i @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/changelog @semantic-release/github @semantic-release/exec @semantic-release/git
      - name: Semantic Release
        env:
          GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
        run: |
          npx semantic-release@23

  # build_ios:
  #   name: Build and Release for iOS
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: "2.x" # Update to your Flutter version

  #     - name flutter: Install dependencies
  #       run: flutter pub get

  #     - name: Build iOS app
  #       run: |
  #         flutter build ios --release --no-codesign
  #         ls -R build/ios/iphoneos  # Print iOS app file paths

  #     - name: Zip and upload output files to release
  #       run: |
  #         mkdir -p release
  #         zip -r output.zip build/ios/iphoneos
  #       uses: svenstaro/upload-release-action@v2
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file: output.zip
  #         asset_name: ios_output.zip
  #         tag: ${{ github.ref }}
  #         overwrite: true
  #         body: "Uploaded iOS output files for this release"

  # build_web:
  #   name: Build and Release for Web
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: "2.x" # Update to your Flutter version

  #     - name flutter: Install dependencies
  #       run: flutter pub get

  #     - name: Build web app
  #       run: |
  #         flutter build web
  #         ls -R build/web  # Print web app file paths

  #     - name: Zip and upload output files to release
  #       run: |
  #         mkdir -p release
  #         zip -r output.zip build/web
  #       uses: svenstaro/upload-release-action@v2
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file: output.zip
  #         asset_name: web_output.zip
  #         tag: ${{ github.ref }}
  #         overwrite: true
  #         body: "Uploaded web output files for this release"

  # build_macos:
  #   name: Build and Release for macOS
  #   runs-on: macos-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3

  #     - name: Setup Flutter
  #       uses: subosito/flutter-action@v2
  #       with:
  #         flutter-version: "2.x" # Update to your Flutter version

  #     - name flutter: Install dependencies
  #       run: flutter pub get

  #     - name: Package macOS app
  #       run: |
  #         flutter build macos
  #         ls -R build/macos  # Print macOS app file paths

  #     - name: Zip and upload output files to release
  #       run: |
  #         mkdir -p release
  #         zip -r output.zip build/macos
  #       uses: svenstaro/upload-release-action@v2
  #       with:
  #         repo_token: ${{ secrets.GITHUB_TOKEN }}
  #         file: output.zip
  #         asset_name: macos_output.zip
  #         tag: ${{ github.ref }}
  #         overwrite: true
  #         body: "Uploaded macOS output files for this release"
